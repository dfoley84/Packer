packer {
  required_plugins {
    amazon = {
      version = ">= 1.1.1"
      source = "github.com/hashicorp/amazon"
    }
  }
}

data "amazon-ami" "autogenerated_1" {
  filters = {
    name                = "amzn2-ami-ecs-hvm-2.0.*-x86_64-ebs"
  }
  most_recent = true
  owners      = ["amazon"]
  region      = "eu-west-1"
}

locals {
  elastic_version = "8.0.0"
}

locals {
  timestamp = regex_replace(timestamp(), "[- TZ:]", "")
}

variable "vpcid"{
  type = string
}
variable "subnetid"{
  type = string
}
variable "securitygroupid"{
  type = string
}

source "amazon-ebs" "linux" {
  ami_name      = "${data.amazon-ami.autogenerated_1.name}-${local.timestamp}"
  ami_description = "${data.amazon-ami.autogenerated_1.name}"
  instance_type = ""
  region        = ""
  source_ami    = "${data.amazon-ami.autogenerated_1.id}"
  ssh_username  = "ec2-user"
  vpc_id = "${var.vpcid}"
  subnet_id = "${var.subnetid}"
  security_group_id = "${var.securitygroupid}"
  ami_users = [""]
  launch_block_device_mappings {
    volume_size           = "40"
    delete_on_termination = true
    volume_type           = "gp3"
    device_name           = "/dev/xvda"
  }
}

build {
  sources = ["source.amazon-ebs.linux"]

  provisioner "shell" {
    inline_shebang = "/bin/sh -ex"
    inline         = [
      "sudo yum update --security -y",
      "sudo amazon-linux-extras install ansible2 -y",
      "sudo ansible-galaxy collection install ansible.posix"
    ]
  }

  provisioner "ansible-local" {
    playbook_file = "ansible/amazon.yaml"
    extra_arguments = ["--extra-vars", "elastic_version=${local.elastic_version}"]
  }

  provisioner "ansible-local" {
    playbook_file = "ansible/iptables.yaml"
  }

#CIS Domains
  provisioner "ansible-local"{
    playbook_file = "ansible/cis/cisdomain1.yaml"
  }
  provisioner "ansible-local"{
    playbook_file = "ansible/cis/cisdomain2.yaml"
  }
  provisioner "ansible-local"{
    playbook_file = "ansible/cis/cisdomain3.yaml"
  }
  provisioner "ansible-local"{
    playbook_file = "ansible/cis/cisdomain4.yaml"
  }
  provisioner "ansible-local"{
    playbook_file = "ansible/cis/cisdomain5.yaml"
  }
    provisioner "ansible-local"{
    playbook_file = "ansible/cis/cisdomain6.yaml"
  }

 provisioner "file"{
    source = "./files"
    destination = "/tmp"
  }

  provisioner "shell" {
    inline_shebang = "/bin/sh -ex"
    inline = [
      "sudo cp /tmp/files/cis-limits.conf /etc/security/limits.d",
      "sudo cp /tmp/files/cis-modprobe.conf /etc/modprobe.d",
      "sudo cp /tmp/files/cis-sysctl.conf /etc/sysctl.d",
      "sudo cp /tmp/files/sshd_config /etc/ssh",
      "sudo cp /tmp/files/ssh_banner /etc/ssh",
      "sudo cp /tmp/files/00-motd-warning /etc/update-motd.d",
      "sudo cp /tmp/files/00-rsyslog-permissions.conf /etc/rsyslog.d",
      "sudo chmod 600 /etc/ssh/sshd_config",
      "sudo chmod 755 /etc/update-motd.d/00-motd-warning",
      "sudo chmod 600 /boot/grub2/grub.cfg",
      "sudo find /var/log -type f -exec chmod g-wx,o-rwx {} +",
      "sudo chmod og-rwx /etc/cron*",
      "rm -rf /tmp/files",
      "sudo yum remove ansible -y"
      ]
  }
}





